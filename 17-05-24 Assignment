#include <iostream>
#include <thread>
#include <mutex>

class SharedBankAccount {
private:
    int balance = 0;  //Stores the current account balance.
    std::mutex mtx; // Mutex for synchronization

public:
    void deposit(int amount) {
        std::lock_guard<std::mutex> lock(mtx); // Acquire lock before accessing balance
        balance += amount;
        std::cout << "Deposited: " << amount << ", New Balance: " << balance << std::endl;
    }

    int getBalance() {
        return balance;
    }
};

class Depositor implements std::runnable<void> {
private:
    SharedBankAccount& account;
    int amount;

public:
    Depositor(SharedBankAccount& account, int amount) : account(account), amount(amount) {}

    void run() override {
        account.deposit(amount);
    }
};

int main() {
    SharedBankAccount account;

    Depositor depositor1(account, 100);
    Depositor depositor2(account, 50);

    std::thread thread1(depositor1);
    std::thread thread2(depositor2);

    thread1.join();
    thread2.join();

    std::cout << "Final Balance: " << account.getBalance() << std::endl;

    return 0;
}
